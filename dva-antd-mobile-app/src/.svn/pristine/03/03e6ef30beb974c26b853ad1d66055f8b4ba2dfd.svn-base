import axios from 'axios'
import { baseURL, ajaxTimeout, notRedirectSign, accessToken } from './config'
import { _cg } from './cookie'

axios.defaults.baseURL = baseURL

const doDecode = (json) => {
  return eval("(" + json + ")");
}

const checkUrl = (url) => {
  if (!url)
    return "";
  return url + "?" + accessToken + "=" + _cg(accessToken) + "&" + notRedirectSign + "=true";
}

const getResponeseErrMsg = (status) => {
  var msg = '未知错误';
  if (status > 199 && status < 300)
    return '';
  switch (status) {
    case 500:
      msg = '服务器发生未知错误.'
      break;
    case 403:
      msg = '访问服务器被拒绝';
      break;
    case 404:
      msg = '未找到请求的页面';
      break;
    case 405:
      msg = '不允许访问本页面的当前方法';
      break;
    case 408:
    case -1: // 目前没有人为调用Connection.abort
      msg = '访问超时';
      break;
    case 502:
      msg = '无法连接';
      break;
    case 504:
    case 0:
    case undefined:
      msg = '网络已断开,不能连接到服务器'
      break;
    default:
      msg = '系统错误,错误代码:' + status;
  }
  return msg;
}

export default function formsubmit(url, params, files) {

  let param = new FormData(); //创建form对象
  Object.keys(params).map(key => {
    param.append(key, params[key])
  })
  Object.keys(files).map(key => {
    const f = files[key];
    param.append(key, f, f.name)
  })

  let config = {
    headers: {
      'Content-Type': 'multipart/form-data'
    }
  };

  return axios.post(checkUrl(url), param, config).then((response) => {
    const {statusText, status} = response
    let data = response.data;
    typeof (data) === "string" && (data = doDecode(data));
    const {success, message = "", ...results} = data;
    if (success === true)
      return {
        ...results,
      };
    else
      throw {
        success,
        status,
        response: {
          message
        }
      };
  }).catch((error) => {
    const {response = {}} = error;
    let {message = "", status, ...otherData} = response;
    if (message !== "") {
      status = 600;
    } else {
      const {data, statusText} = response
      otherData = data
      status = response.status
      message = getResponeseErrMsg(status) || data.message || statusText
      if (status === 401) {
        browserHistory.push(`/login`)
        return;
      }
    }
    throw {
      success: false,
      status,
      message,
      ...otherData
    }
  });
}

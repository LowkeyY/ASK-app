/* global window */
import modelExtend from 'dva-model-extend';
import { pageModel } from './common';
import { ListView } from 'antd-mobile';
import { querysearchatt, querysearchlist } from 'services/querys';
//默认查询结果参数
const defaultResultProps = {
        refreshing: false,
        dataSource: new ListView.DataSource({
            rowHasChanged: (row1, row2) => row1 !== row2,
        }),
        currentData: [],
        isLoading: false,
        hasMore: true,
        pageIndex: 0,
        totalCount: 0,
        scrollerTop: 0,
        pagination: {
            0: 0
        },
    },
    defalutClientHeight = document.documentElement.clientHeight;
;

export default modelExtend(pageModel, {
    namespace: 'mylist',

    state: {
        currentType: 0,
        currentTitle: "",
        defalutHeight: defalutClientHeight,
        resultProps: Object.assign({}, defaultResultProps)
    },

    subscriptions: {
        setup({dispatch, history}) {
            history.listen(({pathname, query, action}) => {
                if (pathname === '/mylist') {
                    if (action == "PUSH") {
                        const {type = 0, title = ""} = query;
                        dispatch({ //重置默认搜索结果
                            type: "updateState",
                            payload: {
                                currentType: type,
                                currentTitle: title,
                                resultProps: Object.assign({}, defaultResultProps)
                            }
                        })
                        dispatch({ //默认开启查询
                            type: 'query',
                            payload: {
                                start: 0
                            }
                        })
                    }
                }
            })
        },
    },
    effects: {
        * query({payload}, {call, put, select}) {
            const {resultProps : {pageIndex}, currentType} = yield select(state => state.mylist);
            const data = yield call(querysearchlist, {
                type: currentType,
                start: pageIndex,
                ...payload
            });
            if (data) {
                let {resultProps : {currentData, pageIndex, hasMore, dataSource}} = yield select(state => state.mylist);
                currentData = [...currentData, ...data.data];
                pageIndex = pageIndex + 1;
                dataSource = dataSource.cloneWithRows(currentData);
                hasMore = currentData.length < data.totalNumber;
                yield put({
                    type: 'updateResult',
                    payload: {
                        currentData: currentData,
                        totalCount: data.totalNumber,
                        dataSource: dataSource,
                        hasMore: hasMore,
                        pageIndex: pageIndex,
                        isLoading: false,
                        refreshing: false,
                    },
                })
            }
        },
    },
    reducers: {
        updateResult(state, {payload}) {
            const {resultProps} = state;
            return {
                ...state,
                resultProps: {
                    ...resultProps,
                    ...payload
                }
            }
        },
        resetResult(state, {payload}) {
            return {
                ...state,
                resultProps: {
                    ...Object.assign({}, defaultResultProps),
                    ...payload
                }
            }
        },
    }
})


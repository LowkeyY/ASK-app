
import modelExtend from 'dva-model-extend'
import { pageModel } from './common'
import { getContent, getCommends, getAuths, deleteCommends,userDatas} from 'services/querycontent'
const findChildrenById = (items = [], id, result = []) => {
        if (items && items.length)
            items.map(item => {
                if (item.id === id)
                    result.push(item);
                findChildrenById(item.items, id, result);
            })
    },
    findAllDeleteId = (items = [], result = []) => {
        if (items && items.length)
            items.map(item => {
                result.push(item.id);
                findAllDeleteId(item.items, result);
            })
    },
    deleteItemsById = (items, deleteId) => {
        let currentItmes = [];
        if (items && items.length) {
            items.map((item, index) => {
                if (item.id !== deleteId) {
                    currentItmes.push(item);
                    if (item.items && item.items.length)
                        item.items = deleteItemsById(item.items, deleteId);
                }
            })
        }
        return currentItmes;
    },
    defaultStatusTag = {
        is404: false,
        hasDeleteAuth: false,
        isShowEditor: false,
    },
    changeDelTypes = (moduleId) => {
        //案例 1->3 , 文库 2->4 ,帖子回复 4->2
        if (moduleId == "1")
            return 3;
        if (moduleId == "2")
            return 4;
        if (moduleId == "4")
            return 2;
        return 0;
    };


export default modelExtend(pageModel, {
    namespace: 'details',
    state: {
        currentContent: {},
        currentComments: [],
        isShowInputFoot: true,
        placeholder: '请输入内容...',
        ...Object.assign({}, defaultStatusTag),
    },
    subscriptions: {
        setup({dispatch, history}) {
            history.listen(location => {
                let {pathname, query} = location;
                if (pathname.startsWith('/details')) {
                    dispatch({
                        type: 'updateState',
                        payload: {
                            ...Object.assign({}, defaultStatusTag),
                            ...query
                        }
                    })
                    dispatch({
                        type: 'queryContent',
                        payload: {
                            ...query
                        }
                    })
                    dispatch({
                        type: 'queryCommends',
                        payload: {
                            ...query
                        }
                    })
                    dispatch({
                        type: 'queryDeleteAuth',
                        payload: {
                            ...query
                        }
                    })
                }
            })
        }
    },
    effects: {
        * queryContent({payload, }, {call, put, select}) {
            const result = yield call(getContent, payload);
            if (result) {
                const {data, is404 = false} = result;
                yield put({
                    type: 'updateState',
                    payload: {
                        currentContent: {
                            ...result.data,
                        },
                        is404
                    },
                })
            }
        },
        * queryCommends({payload, }, {call, put, select}) {
            const result = yield call(getCommends, payload);
            if (result) {
                yield put({
                    type: 'updateState',
                    payload: {
                        currentComments: result.data,
                    },
                })
            }
        },
        * queryDeleteAuth({payload, }, {call, put, select}) {
            const result = yield call(getAuths, payload);
            if (result) {
                const {hasAuth = false} = result;
                yield put({
                    type: 'updateState',
                    payload: {
                        hasDeleteAuth: hasAuth === true,
                    },
                })
            }
        },
        * deleteCommends({payload}, {call, put, select}) {
            const {currentComments, moduleId = "0"} = yield select(_ => _.details);
            const {id} = payload;
            let results = [],
                deleteIds = [];
            findChildrenById(currentComments, id, results);
            results = results[0];
            deleteIds.push(results.id);
            findAllDeleteId(results.items, deleteIds);
            const result = yield call(deleteCommends, {
                optId: deleteIds.join(","),
                types: changeDelTypes(moduleId)
            });
            if (result) {
                yield put({
                    type: 'updateState',
                    payload: {
                        currentComments: deleteItemsById(currentComments, id),
                    },
                })
            }
        },
      * collect({payload}, {call, put, select}) {
        const data = yield call(userDatas, {
          opts: "collect",
          optId: payload.id,
          types:payload.value
        })
        if (data) {
          const { currentContent} = yield select(_ => _.details);
          yield put({
            type: 'updateState',
            payload: {
              currentContent:{
                ...currentContent,
                isCollect:payload.value===1?true:false
              }
            },
          })
        }
      }
    },

})

